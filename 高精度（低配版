#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long LL;

const int siz = 8;
const int N = 2e5+10;
const LL mod =1e8; 

char ch1[N],ch2[N];
LL a[N>>2],b[N>>2],s[N>>1];
LL cp[N>>2],yu[N>>2],lt[N>>2];
int fa,fb,f,la,lb;

int cmp(LL num1[],LL num2[]);
void pls(LL a1[],LL b[]);
void mnu(LL a[],LL b[]);
void print(LL num[]);
void div(LL a[],LL b[]);
void ly(LL num[]);
void cpy(LL num1[],LL num2[]);
void ry(LL num[]);
void clear(LL num[]);

void init()
{
    scanf(" %s %s", ch1, ch2);
    if (ch1[0]=='-')fa=1,ch1[0]='0';
    if (ch2[0]=='-')fb=1,ch2[0]='0';
    la=strlen(ch1),lb=strlen(ch2);
    for(int i=la-1;i>=0;i-=siz)
    {
        LL pw=1;
        a[0]++;
        for (int j = i; j >i-siz && j>=0; j -- )
        {
            a[a[0]]+=(ch1[j]^48)*pw;//char^48==char-48
            pw=(pw<<3)+(pw<<1);//就是乘10,md
        }
    }
    for(int i=lb-1;i>=0;i-=siz)
    {
        LL pw=1;
        b[0]++;
        for (int j = i; j >i-siz && j>=0; j -- )
        {
            b[b[0]]+=(ch2[j]^48)*pw;
            pw=(pw<<3)+(pw<<1);
        }
    }
}

void print(LL num[])
{
    if(num[0]==1 && num[1]==0)f=0;
    if (f)printf("-"),f=0;
    printf("%lld",num[num[0]]);
    for (int i = num[0]-1; i; i -- )printf("%08lld",num[i]);
    puts("");
}

int cmp(long long num1[],long long num2[])
{
    if(num1[0]>num2[0])return 1;
    else if(num1[0]<num2[0])return -1;
    else
    {
        for (int i = num1[0]; i >= 1; i -- )
        {
            if (num1[i]>num2[i])return 1;
            if (num1[i]<num2[i])return -1;
        }
        return 0;
    }
}

void pls(LL a[],LL b[])
{
    if (fa^fb)
    {
        if (fa)fa^=1,mnu(b,a),fa^=1;
        else fb^=1,mnu(a,b),fb^=1;
        return ;
    }
    else if(fa&fb)
    {
        fa=fb=0;
        f^=1;
        pls(a,b);
        fa=fb=1;
        return ;
    }
    else
    {
        clear(s);
        s[0]=max(a[0],b[0])+1;
        for (int i = 1; i <= s[0]; i ++ )
        {
            s[i]+=a[i]+b[i];
            if (s[i]>=mod)
            {
                s[i]-=mod;
                s[i+1]++;
            }
        }
        if (!s[s[0]] && s[0]>1)s[0]--;
    }
}

void mnu(LL a[],LL b[])
{
    if (fa^fb)
    {
        if (fa)fa^=1,f^=1,pls(a,b),fa^=1;
        else fb^=1,pls(a,b),fb^=1;
    }
    else if(fa&fb)
    {
        fa=fb=0;
        mnu(b,a);
        fa=fb=1;
    }
    else
    {
        clear(s);
        if(cmp(a,b)==-1)swap(a,b),f^=1;
        s[0]=max(a[0],b[0]);
        for (int i = 1; i <= s[0]; i ++ )
        {
            s[i]+=a[i]-b[i];
            if (s[i]<0)s[i]+=mod,s[i+1]--;
        }
        while(!s[s[0]] && s[0]>1)s[0]--;
    }
}

void clear(LL num[])
{
	for(int i=num[0];i;--i) num[i]=0;
	num[0]=1;
}

void ry(LL num[])
{
	for(int i=num[0];i;--i){
		if((num[i]&1)&&i>1) num[i-1]+=mod;//将1借到下一位
		num[i]>>=1;
	}if(!num[num[0]]&&num[0]>1) --num[0];
}

void ly(LL num[])
{
	++num[0];
	for(int i=1;i<=num[0];++i){
		num[i]<<=1;
		if(num[i-1]>=mod) num[i-1]-=mod,++num[i];//进位，注意后效性
	}if(!num[num[0]]&&num[0]>1) --num[0];
	return;
}

void mul(LL a[],LL b[])
{
    if(fa^fb)f^=1;
    clear(s);
    s[0]=a[0]+b[0];
    for (int i = 1; i <= a[0]; i ++ )
    {
        for (int j = 1; j <= b[0]; j ++ )
        {
            s[i+j-1]+=a[i]*b[j];
            if (s[i+j-1]>=mod)s[i+j]+=s[i+j-1]/mod,s[i+j-1]%=mod;
        }
    }
    if (!s[s[0]] && s[0]>1)s[0]--;
}

void cpy(LL num1[],LL num2[])
{
	for(int i=num1[0];i>num2[0];--i) num1[i]=0;
	for(int i=0;i<=num2[0];++i) num1[i]=num2[i];
}


void div(LL a[],LL b[])
{
    
    
    clear(cp);
    clear(lt);
    cp[0]=1,cp[1]=1,lt[0]=1;
    while(cmp(a,b)!=-1)ly(b),ly(cp);
    while(cp[0]>1 || cp[1])
    {
        if(cmp(a,b)!=-1)
        {
            mnu(a,b);
            cpy(a,s);
            pls(lt,cp);
            cpy(lt,s);
        }
        ry(b),ry(cp);
    }
    cpy(s,lt),cpy(lt,a);
    if (fa^fb)f^=1;
    else f=0;
}

int main()
{
    init();
    s[0]=1;
    div(a,b);
    print(lt);
    return 0;
}
